package com.cybercad.billing.domain.conn;

// Generated 13 Aug, 2015 2:58:27 AM by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.cybercad.billing.domain.ConsConn;
import com.cybercad.billing.domain.Constituency;
import com.cybercad.billing.domain.PoliticalZone;
import com.cybercad.billing.domain.PwdClass;
import com.cybercad.billing.domain.conn.payment.ConnPayment;
import com.cybercad.billing.domain.conn.reading.ConnReading;
import com.cybercad.billing.domain.devices.Meter;

/**
 * Connection generated by hbm2java
 */
@Entity
@Table(name = "connection", catalog = "billing")
public class Connection implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	
	private Integer id;
	private PoliticalZone politicalZone;
	private Meter meter;
	private ConnectionType connectionType;
	private Constituency constituency;
	private PwdClass pwdClass;
	private String connCode;
	private Double currentReading;
	private Double currentBalance;
	private Boolean status;
	private Set<ConsConn> consConns = new HashSet<ConsConn>(0);
	private Set<ConnReading> connReadings = new HashSet<ConnReading>(0);
	private Set<ConnPayment> connPayments = new HashSet<ConnPayment>(0);
	private ConnStatus connStatus;

	public Connection() {
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "conn_status_id", nullable = false)
	public ConnStatus getConnStatus() {
		return this.connStatus;
	}

	public void setConnStatus(ConnStatus connStatus) {
		this.connStatus = connStatus;
	}

	public Connection(PoliticalZone politicalZone, Meter meter,
			ConnectionType connectionType, Constituency constituency,
			PwdClass pwdClass, String connCode) {
		this.politicalZone = politicalZone;
		this.meter = meter;
		this.connectionType = connectionType;
		this.constituency = constituency;
		this.pwdClass = pwdClass;
		this.connCode = connCode;
	}

	public Connection(PoliticalZone politicalZone, Meter meter,
			ConnectionType connectionType, Constituency constituency,
			PwdClass pwdClass, String connCode, Double currentReading,
			Double currentBalance, Boolean status, Set<ConsConn> consConns,
			Set<ConnReading> connReadings, Set<ConnPayment> connPayments) {
		this.politicalZone = politicalZone;
		this.meter = meter;
		this.connectionType = connectionType;
		this.constituency = constituency;
		this.pwdClass = pwdClass;
		this.connCode = connCode;
		this.currentReading = currentReading;
		this.currentBalance = currentBalance;
		this.status = status;
		this.consConns = consConns;
		this.connReadings = connReadings;
		this.connPayments = connPayments;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "political_zone_id", nullable = false)
	public PoliticalZone getPoliticalZone() {
		return this.politicalZone;
	}

	public void setPoliticalZone(PoliticalZone politicalZone) {
		this.politicalZone = politicalZone;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "meter_id", nullable = false)
	public Meter getMeter() {
		return this.meter;
	}

	public void setMeter(Meter meter) {
		this.meter = meter;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "connection_type_id", nullable = false)
	public ConnectionType getConnectionType() {
		return this.connectionType;
	}

	public void setConnectionType(ConnectionType connectionType) {
		this.connectionType = connectionType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "constituency_id", nullable = false)
	public Constituency getConstituency() {
		return this.constituency;
	}

	public void setConstituency(Constituency constituency) {
		this.constituency = constituency;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pwd_class_id", nullable = false)
	public PwdClass getPwdClass() {
		return this.pwdClass;
	}

	public void setPwdClass(PwdClass pwdClass) {
		this.pwdClass = pwdClass;
	}

	@Column(name = "conn_code", unique = true, nullable = false, length = 15)
	public String getConnCode() {
		return this.connCode;
	}

	public void setConnCode(String connCode) {
		this.connCode = connCode;
	}

	@Column(name = "current_reading", precision = 22, scale = 0)
	public Double getCurrentReading() {
		return this.currentReading;
	}

	public void setCurrentReading(Double currentReading) {
		this.currentReading = currentReading;
	}

	public Connection(String connCode) {
		super();
		this.connCode = connCode;
	}

	@Column(name = "current_balance", precision = 22, scale = 0)
	public Double getCurrentBalance() {
		return this.currentBalance;
	}

	public void setCurrentBalance(Double currentBalance) {
		this.currentBalance = currentBalance;
	}

	@Column(name = "status")
	public Boolean getStatus() {
		return this.status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "connection")
	public Set<ConsConn> getConsConns() {
		return this.consConns;
	}

	public void setConsConns(Set<ConsConn> consConns) {
		this.consConns = consConns;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "connection")
	public Set<ConnReading> getConnReadings() {
		return this.connReadings;
	}

	public void setConnReadings(Set<ConnReading> connReadings) {
		this.connReadings = connReadings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "connection")
	public Set<ConnPayment> getConnPayments() {
		return this.connPayments;
	}

	public void setConnPayments(Set<ConnPayment> connPayments) {
		this.connPayments = connPayments;
	}

	// public long calculateMinUnits() {
	// return Math.min(connStatus.getCurrentAverage(),
	// getConnectionType().getMinUnits());
	// }

	public ConnStatus getConnectionStatus() {
		return connStatus;
	}

	public void setConnectionStatus(ConnStatus connStatus) {
		this.connStatus = connStatus;
	}

}
